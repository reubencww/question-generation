// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: hskw/hskw.proto

package hskw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnappyClient is the client API for Snappy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnappyClient interface {
	CreatedCaption(ctx context.Context, in *CreatedCaptionRequest, opts ...grpc.CallOption) (*CreatedCaptionResponse, error)
	CreatedQuestion(ctx context.Context, in *CreatedQuestionRequest, opts ...grpc.CallOption) (*CreatedQuestionResponse, error)
}

type snappyClient struct {
	cc grpc.ClientConnInterface
}

func NewSnappyClient(cc grpc.ClientConnInterface) SnappyClient {
	return &snappyClient{cc}
}

func (c *snappyClient) CreatedCaption(ctx context.Context, in *CreatedCaptionRequest, opts ...grpc.CallOption) (*CreatedCaptionResponse, error) {
	out := new(CreatedCaptionResponse)
	err := c.cc.Invoke(ctx, "/Snappy/CreatedCaption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snappyClient) CreatedQuestion(ctx context.Context, in *CreatedQuestionRequest, opts ...grpc.CallOption) (*CreatedQuestionResponse, error) {
	out := new(CreatedQuestionResponse)
	err := c.cc.Invoke(ctx, "/Snappy/CreatedQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnappyServer is the server API for Snappy service.
// All implementations must embed UnimplementedSnappyServer
// for forward compatibility
type SnappyServer interface {
	CreatedCaption(context.Context, *CreatedCaptionRequest) (*CreatedCaptionResponse, error)
	CreatedQuestion(context.Context, *CreatedQuestionRequest) (*CreatedQuestionResponse, error)
	mustEmbedUnimplementedSnappyServer()
}

// UnimplementedSnappyServer must be embedded to have forward compatible implementations.
type UnimplementedSnappyServer struct {
}

func (UnimplementedSnappyServer) CreatedCaption(context.Context, *CreatedCaptionRequest) (*CreatedCaptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedCaption not implemented")
}
func (UnimplementedSnappyServer) CreatedQuestion(context.Context, *CreatedQuestionRequest) (*CreatedQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedQuestion not implemented")
}
func (UnimplementedSnappyServer) mustEmbedUnimplementedSnappyServer() {}

// UnsafeSnappyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnappyServer will
// result in compilation errors.
type UnsafeSnappyServer interface {
	mustEmbedUnimplementedSnappyServer()
}

func RegisterSnappyServer(s grpc.ServiceRegistrar, srv SnappyServer) {
	s.RegisterService(&Snappy_ServiceDesc, srv)
}

func _Snappy_CreatedCaption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedCaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnappyServer).CreatedCaption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snappy/CreatedCaption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnappyServer).CreatedCaption(ctx, req.(*CreatedCaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snappy_CreatedQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnappyServer).CreatedQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snappy/CreatedQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnappyServer).CreatedQuestion(ctx, req.(*CreatedQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Snappy_ServiceDesc is the grpc.ServiceDesc for Snappy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snappy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Snappy",
	HandlerType: (*SnappyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatedCaption",
			Handler:    _Snappy_CreatedCaption_Handler,
		},
		{
			MethodName: "CreatedQuestion",
			Handler:    _Snappy_CreatedQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hskw/hskw.proto",
}
